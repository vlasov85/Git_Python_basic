__author__ = 'Власов А.В.'
import math
import random

# EASY ______________________________________________________________

# Задание-1:
# Напишите функцию, округляющую полученное произвольное десятичное число
# до кол-ва знаков (кол-во знаков передается вторым аргументом).
# Округление должно происходить по математическим правилам (0.6 --> 1, 0.4 --> 0).
# Для решения задачи не используйте встроенные функции и функции из модуля math.

print('EASY. Задача 1. Округление')

def my_round(number, ndigits):
    number = number * (10 ** ndigits)
    number = number // 1
    number = number / (10 ** ndigits)
    return number

numberUser = float(input("введите число (знак разделения '.')= "))
ndigitsUser = int(input("введите требуемое число знаков после запятой = "))

print(my_round(numberUser, ndigitsUser))

# Задание-2:
# Дан шестизначный номер билета. Определить, является ли билет счастливым.
# Решение реализовать в виде функции.
# Билет считается счастливым, если сумма его первых и последних цифр равны.
# !!!P.S.: функция не должна НИЧЕГО print'ить

print('EASY. Задача 2. Счастливый билет')

def lucky_ticket(ticket_number):
    num = str(ticket_number)
    sum1 = 0
    sum2 = 0

    for i in num[:3]:
        sum1 = sum1 + int(i)

    for i in num[3:]:
        sum2 = sum2 + int(i)

    return sum1 == sum2

ticket_number = input('Введите 6-ти значный номер билета - ')

print(lucky_ticket(ticket_number))

# NORMAL ____________________________________________________________

# Задание-1:
# Напишите функцию, возвращающую ряд Фибоначчи с n-элемента до m-элемента.
# Первыми элементами ряда считать цифры 1 1

print('NORMAL. Задача 1. Ряд Фибоначчи')

def fibonacci(n, m):
    list_fib = [1, 1]

    for i in range(m):
        list_fib.append(list_fib[-1] + list_fib[-2])

    return list_fib[n:m]

n = int(input('введите с какого числа вывести ряд Фибоначчи - '))
m = int(input('введите до какого числа вывести ряд Фибоначчи - '))

print('полученный ряд Фибоначчи -', fibonacci(n, m))

# Задача-2:
# Напишите функцию, сортирующую принимаемый список по возрастанию.
# Для сортировки используйте любой алгоритм (например пузырьковый).
# Для решения данной задачи нельзя использовать встроенную функцию и метод sort()

print('NORMAL. Задача 2. сортировка по возрастанию')

def sort_to_max(origin_list):
    for i in range(0, len(origin_list)-1):
        for j in range(i+1, len(origin_list)):
            if float(origin_list[i]) > float(origin_list[j]):
                zam = origin_list[i]
                origin_list[i] = origin_list[j]
                origin_list[j] = zam
    return origin_list

elemN = int(input("введите длину списка = "))
list1 = []

i = 0
while i < elemN:
    list1.append(round(random.uniform(-100, 100), 2))
    i += 1

print('список до сортировки =', list1)
print('список после сортировки =', sort_to_max(list1))

# Задача-3:
# Напишите собственную реализацию стандартной функции filter.
# Разумеется, внутри нельзя использовать саму функцию filter.

print('NORMAL. Задача 3. Фильтр (принято четные)')

def filter(listX):
    listF = []
    for i in range (0, len(listX)):
        if listX[i] % 2 == 0:
            listF.append(listX[i])
        i += 1
    return listF

elemN = int(input("введите длину списка = "))

list1 = []

i = 0
while i < elemN:
    list1.append(round(random.randint(-100, 100), 0))
    i += 1

print('список до фильтра list1 =', list1)
print("список после фильтра (четные) =", filter(list1))

# Задача-4:
# Даны четыре точки А1(х1, у1), А2(x2 ,у2), А3(x3 , у3), А4(х4, у4).
# Определить, будут ли они вершинами параллелограмма.

print('NORMAL. Задача 4. Определение параллелограма')

def parallelogram(a1, a2, a3, a4):
    if abs(a2[0] - a1[0]) == abs(a4[0] - a3[0]) and \
       abs(a2[1] - a1[1]) == abs(a4[1] - a3[1]):
        return True
    return False

a1 = [0, 0]
a2 = [5, 0]
a3 = [2, 3]
a4 = [7, 3]

print(parallelogram(a1, a2, a3, a4))

# HARD ______________________________________________________________

# Задание-1:
# Написать программу, выполняющую операции (сложение и вычитание) с простыми дробями.
# Дроби вводятся и выводятся в формате:
# n x/y ,где n - целая часть, x - числитель, у - знаменатель.
# Дроби могут быть отрицательные и не иметь целой части, или иметь только целую часть.
# Примеры:
# Ввод: 5/6 + 4/7 (всё выражение вводится целиком в виде строки)
# Вывод: 1 17/42  (результат обязательно упростить и выделить целую часть)
# Ввод: -2/3 - -2
# Вывод: 1 1/3

print('HARD. Задача 1. Операции с дробями')
# выполнена без функций и только для одного примера (сложения)
# простите много работаю - не хватает времени на все задания

str1 = '5/6 + 4/7'
str2 = '-2/3 - -2'

param = ' + '

sp1_el1 = str1.split(param)[0]
sp1_el2 = str1.split(param)[1]

el1_zn = int(sp1_el1.split('/')[1])
el2_zn = int(sp1_el2.split('/')[1])
zn = el1_zn * el2_zn

el1_ch = int(sp1_el1.split('/')[0])
el2_ch = int(sp1_el2.split('/')[0])

ch = int(el1_ch*(zn/el1_zn) + el2_ch*(zn/el2_zn))
print(ch)
print(zn)

if ch > zn:
    print(int(ch//zn), int(ch-zn), '/', zn)
else:
    print(ch, '/', zn)

# Задание-2:
# Дана ведомость расчета заработной платы (файл "data/workers").
# Рассчитайте зарплату всех работников, зная что они получат полный оклад,
# если отработают норму часов. Если же они отработали меньше нормы,
# то их ЗП уменьшается пропорционально, а за заждый час переработки
# они получают удвоенную ЗП, пропорциональную норме.
# Кол-во часов, которые были отработаны, указаны в файле "data/hours_of"




# Задание-3:
# Дан файл ("data/fruits") со списком фруктов.
# Записать в новые файлы все фрукты, начинающиеся с определенной буквы.
# Т.е. в одном файле будут все фрукты на букву “А”, во втором на “Б” и т.д.
# Файлы назвать соответственно.
# Пример имен файлов: fruits_А, fruits_Б, fruits_В ….
# Важно! Обратите внимание, что нет фруктов, начинающихся с некоторых букв.
# Напишите универсальный код, который будет работать с любым списком фруктов
# и распределять по файлам в зависимости от первых букв, имеющихся в списке фруктов.
# Подсказка:
# Чтобы получить список больших букв русского алфавита:
# print(list(map(chr, range(ord('А'), ord('Я')+1))))

